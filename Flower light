#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

struct Pair {
    int val;
    int cnt;
    Pair(int v, int c) : val(v), cnt(c) {}
};

int partition(vector<int>& arr, int low, int high) {
    int i = low - 1;
    int pivot = arr[high];
    for (int j = low; j < high; j++) {
        if (arr[j] < pivot) {
            i++;
            swap(arr[i], arr[j]);
        }
    }
    i++;
    swap(arr[high], arr[i]);
    return i;
}

void quicksor(vector<int>& arr, int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high);
        quicksor(arr, low, pi - 1);
        quicksor(arr, pi + 1, high);
    }
}

int main() {
    int n, k;
    cin >> n >> k;
    vector<int> A(n);
    for (int i = 0; i < n; i++) {
        cin >> A[i];
    }
    quicksor(A, 0, n - 1);
    vector<Pair> B;
    B.push_back(Pair(A[0], 1));
    for (int i = 1; i < n; i++) {
        if (A[i] == B.back().val) {
            B.back().cnt++;
        } else {
            B.push_back(Pair(A[i], 1));
        }
    }
    int count = 0;
    while (count < k) {
        for (int i = 0; i < B.size(); i++) {
            if (B[i].cnt > 0) {
                cout << B[i].val << " ";
                count++;
                if (count==k){
                    break;
                }
                }
                
                B[i].cnt--;
            }
        }
    }
